--  code generated by Win32Lib IDE v0.21.1 Build Sept-29-2006

constant TheProgramType="exw" 
 
include Win32Lib.ew
without warning

--------------------------------------------------------------------------------
--  Window Window1
constant Window1 = createEx( Window, "Image Editor", 0, Default, Default, 465, 455, 0, 0 )
constant Menu_101 = createEx( Menu, "File", Window1, 0, 0, 0, 0, 0, 0 )
constant MenuItem_102 = createEx( MenuItem, "New", Menu_101, 0, 0, 0, 0, 0, 0 )
constant MenuItem_103 = createEx( MenuItem, "", Menu_101, 0, 0, 0, 0, 0, 0 )
constant MenuItem_104 = createEx( MenuItem, "Open", Menu_101, 0, 0, 0, 0, 0, 0 )
constant MenuItem_106 = createEx( MenuItem, "Save", Menu_101, 0, 0, 0, 0, 0, 0 )
constant MenuItem_105 = createEx( MenuItem, "Save AS", Menu_101, 0, 0, 0, 0, 0, 0 )
constant MenuItem_107 = createEx( MenuItem, "", Menu_101, 0, 0, 0, 0, 0, 0 )
constant MenuItem_108 = createEx( MenuItem, "Exit", Menu_101, 0, 0, 0, 0, 0, 0 )
constant Menu_114 = createEx( Menu, "Edit", Window1, 0, 0, 0, 0, 0, 0 )
constant MenuItem_140 = createEx( MenuItem, "Undo", Menu_114, 0, 0, 0, 0, 0, 0 )
constant MenuItem_139 = createEx( MenuItem, "", Menu_114, 0, 0, 0, 0, 0, 0 )
constant MenuItem_115 = createEx( MenuItem, "Cut", Menu_114, 0, 0, 0, 0, 0, 0 )
constant MenuItem_116 = createEx( MenuItem, "Copy", Menu_114, 0, 0, 0, 0, 0, 0 )
constant MenuItem_117 = createEx( MenuItem, "Paste", Menu_114, 0, 0, 0, 0, 0, 0 )
constant Menu_142 = createEx( Menu, "Text", Window1, 0, 0, 0, 0, 0, 0 )
constant MenuItem_143 = createEx( MenuItem, "Font", Menu_142, 0, 0, 0, 0, 0, 0 )
constant Menu_113 = createEx( Menu, "Transform", Window1, 0, 0, 0, 0, 0, 0 )
constant MenuItem_118 = createEx( MenuItem, "Mirror horizontal", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_119 = createEx( MenuItem, "Filp vertical", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_120 = createEx( MenuItem, "", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_121 = createEx( MenuItem, "Rotate 90", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_122 = createEx( MenuItem, "Rotate 180", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_123 = createEx( MenuItem, "Rotate 270", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_138 = createEx( MenuItem, "Rotate", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_124 = createEx( MenuItem, "", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_125 = createEx( MenuItem, "Resize canvas", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_126 = createEx( MenuItem, "Stretch", Menu_113, 0, 0, 0, 0, 0, 0 )
constant MenuItem_137 = createEx( MenuItem, "Scale", Menu_113, 0, 0, 0, 0, 0, 0 )
constant Menu_109 = createEx( Menu, "Image", Window1, 0, 0, 0, 0, 0, 0 )
constant MenuItem_110 = createEx( MenuItem, "Clear", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_130 = createEx( MenuItem, "Colorize", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_111 = createEx( MenuItem, "Replace left with right", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_135 = createEx( MenuItem, "Emboss", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_131 = createEx( MenuItem, "", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_129 = createEx( MenuItem, "Make Gray", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_128 = createEx( MenuItem, "Invert Colors", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_112 = createEx( MenuItem, "Blur", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_133 = createEx( MenuItem, "Subtle Blur", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_132 = createEx( MenuItem, "Sharpen", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_134 = createEx( MenuItem, "Subtle Sharpen", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_127 = createEx( MenuItem, "Adjust Brightness", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_141 = createEx( MenuItem, "Adjust Contrast", Menu_109, 0, 0, 0, 0, 0, 0 )
constant MenuItem_136 = createEx( MenuItem, "Detect Edges", Menu_109, 0, 0, 0, 0, 0, 0 )
sequence IDEFlags
IDEFlags = classDefaults( Window, { {1, {WS_SYSMENU}},{2, {WS_EX_STATICEDGE}} } )
constant CWindow1 = createEx( Window, "CWindow1", Window1, 70, 0, 290, 200, w32or_all({WS_CHILD, WS_CLIPSIBLINGS}), w32or_all({WS_EX_STATICEDGE}) )
openWindow(CWindow1, Normal)
moveZOrder( CWindow1, HWND_TOP)
setWindowBackColor( CWindow1,8421504 )
IDEFlags = classDefaults( Window, { {1, {WS_SYSMENU}},{2, {WS_EX_STATICEDGE}} } )
constant CWindow2 = createEx( Window, "", Window1, 70, 220, 90, 120, w32or_all({WS_CHILD, WS_CLIPSIBLINGS}), w32or_all({WS_EX_STATICEDGE}) )
openWindow(CWindow2, Normal)
moveZOrder( CWindow2, HWND_TOP)
constant StatusBar1 = createEx( StatusBar, "", Window1, 0, 0, 0, 0, 0, 0 )
constant PushButton1 = createEx( PictureButton, "", Window1, 5, 5, 30, 24, 0, 0 )
constant PushButton2 = createEx( PictureButton, "", Window1, 35, 5, 30, 24, 0, 0 )
constant PushButton3 = createEx( TogglePicture, "", Window1, 5, 30, 30, 24, 0, 0 )
constant PushButton4 = createEx( TogglePicture, "", Window1, 35, 30, 30, 24, 0, 0 )
constant PushButton5 = createEx( TogglePicture, "", Window1, 5, 55, 30, 24, 0, 0 )
constant PushButton6 = createEx( TogglePicture, "", Window1, 35, 55, 30, 24, 0, 0 )
constant PushButton7 = createEx( TogglePicture, "", Window1, 5, 80, 30, 24, 0, 0 )
constant PushButton8 = createEx( TogglePicture, "", Window1, 35, 80, 30, 24, 0, 0 )
constant PushButton9 = createEx( TogglePicture, "", Window1, 5, 105, 30, 24, 0, 0 )
constant PushButton10 = createEx( TogglePicture, "", Window1, 35, 105, 30, 24, 0, 0 )
constant Bitmap1 = createEx( Bitmap, "", Window1, 5, 220, 60, 90, 0, 0 )
setBitmap( Bitmap1,"colours.bmp")
constant PushButton13 = createEx( TogglePicture, "", CWindow2, 2, -9, 40, 20, 0, 0 )
constant PushButton14 = createEx( TogglePicture, "", CWindow2, 2, 11, 40, 20, 0, 0 )
constant PushButton15 = createEx( TogglePicture, "", CWindow2, 2, 31, 40, 20, 0, 0 )
constant text_pixmap = createEx( Pixmap, "text pixmap", Window1, 0, 350, 100, 30, 0, 0 )
---------------------------------------------------------
--------------------------------------------------------------------------------
--  Window Window2
IDEFlags = classDefaults(Window, { {1, {WS_SYSMENU}},{2, {WS_EX_DLGMODALFRAME}} } )
constant Window2 = createEx( Window, "Create a new image", Window1, Default, Default, 209, 130, {WS_DLGFRAME, WS_SYSMENU}, {WS_EX_DLGMODALFRAME} )
constant LText28 = createEx( RText, "Width:", Window2, 40, 10, 40, 20, 0, 0 )
constant EditText_width = createEx( EditText, "", Window2, 80, 10, 70, 20, 0, 0 )
constant LText29 = createEx( RText, "Height:", Window2, 40, 40, 40, 20, 0, 0 )
constant EditText_height = createEx( EditText, "", Window2, 80, 40, 70, 20, w32or_all({#2000}), 0 )
constant PushButton26 = createEx( PushButton, "OK", Window2, 10, 70, 80, 30, 0, 0 )
constant PushButton27 = createEx( PushButton, "Cancel", Window2, 110, 70, 80, 30, 0, 0 )
---------------------------------------------------------
--------------------------------------------------------------------------------
include win32dib.ew
include freedib.ew
include xcontrols.ew
include picture_button.ew

function real(sequence string)
sequence temp
temp=value(string)
return temp[2]
end function

procedure centerwindow(integer win)
integer width,height,window_width,window_height
sequence size
    size=getCtlSize(win)
    window_width=size[1]
    window_height=size[2]
    width=w32Func(xGetSystemMetrics,{SM_CXSCREEN})
    height=w32Func(xGetSystemMetrics,{SM_CYSCREEN})
    setRect( win,floor((width/2))-floor((window_width/2)) ,floor((height/2))-floor((window_height/2))-32, window_width, window_height, 0 )
end procedure

function rgbs(atom rgb)  --convert a win32lib color to a dib color
	return ( {and_bits(#00FF0000, rgb) / #10000,
	          and_bits(#0000FF00, rgb) / #100,
	          and_bits(#000000FF, rgb) } )
end function

function rgbs2(sequence col) --convert a dib color to a win32lib color
	return rgb(col[3],col[2],col[1])
end function

function get_file_fullname_part(sequence fname)
    for i=length(fname) to 1 by -1 do
    	if fname[i]='\\' then
    	   return fname[i+1..length(fname)]
    	end if
    end for
    return fname
end function

function get_file_name_part(sequence fname)
    for i=length(fname) to 1 by -1 do
    	if fname[i]='\\' then
    	   for j=length(fname) to i by -1 do
    	   	  if fname[j]='.' then
    	   	  	return fname[i+1..j-1]
    	   	  end if
    	   end for
    	   return fname[i+1..length(fname)]
    	end if
    end for
    --maybe theres no path just a name
    for i=length(fname) to 1 by -1 do
    	if fname[i]='.' then
    	   return fname[1..i-1]
    	end if
    end for
end function


function file_exsist(sequence fname)
  integer fn
  fn=open(fname,"r")
  if fn!=-1  then
    close(fn)
  	return 1
  end if
  return 0
end function

function get_file_path_part(sequence fname)
    for i=length(fname) to 1 by -1 do
    	if fname[i]='\\' then
    		return fname[1..i]
    	end if
    end for
end function

sequence working_dir
working_dir=command_line()
working_dir=get_file_path_part(working_dir[1])
working_dir=current_dir()
--puts(1,working_dir)

integer mainwin
mainwin  = xControl( LimitSize, "", Window1, 465, 455, 0, 0, 0, 0 )

sequence OldFlds
OldFlds = setTabStops(Window1, {})

constant Pixmap1 = createEx( Pixmap, "", Window1, 5, 230, 60, 90, 0, 0 )
setPixmap( Pixmap1,"colours.bmp")

sequence imagefiletypes
imagefiletypes=
{
"All","*.BMP;*.CUT;*.DDS;*.GIF;*.HDR;*.ICO;*.IFF;*.LBM;*.JNG;*.JPG;*.JIF;*.JPEG;*.JPE;*.KOA;*.MNG;*.PBM;*.PCD;*.PCX;*.PGM;*.PNG;*.PPM;*.PSD;*.RAS;*.TGA;*.TARGA;*.TIF;*.TIFF;*.WBMP;*.XBM;*.XPM",
"Windows Bitmap File", "*.BMP",
"Dr. Halo", "*.CUT",
"DirectDraw Surface", "*.DDS",
"Graphics Interchange Format", "*.GIF",
"High Dynamic Range", "*.HDR",
"Windows Icon", "*.ICO",
"Amiga IFF", "*.IFF;*.LBM",
"JPEG Network Graphics", "*.JNG",
"Independent JPEG Group", "*.JPG;*.JIF;*.JPEG;*.JPE",
"Commodore 64 Koala format", "*.KOA",
"Multiple Network Graphics", "*.MNG",
"Portable Bitmap", "*.PBM",
"Kodak PhotoCD", "*.PCD",
"Zsoft Paintbrush PCX bitmap format" ,"*.PCX",
"Portable Graymap", "*.PGM",
"Portable Network Graphics" ,"*.PNG",
"Portable Pixelmap","*.PPM",
"Adobe Photoshop", "*.PSD",
"Sun Rasterfile", "*.RAS",
"Truevision Targa files","*.TGA;*.TARGA",
"Tagged Image File Format", "*.TIF;*.TIFF",
"Wireless Bitmap","*.WBMP",
"X11 Bitmap Format ","*.XBM",
"X11 Pixmap Format ","*.XPM"
}

integer defalut_width,defalut_height
defalut_width=32
defalut_height=32
integer panle1_right
panle1_right=70

constant program_name="Image Editor - "

integer save_changes
save_changes=0  --indicate whever to save
sequence filename --the open or save filename
filename="New Image.BMP"
setText(Window1,program_name&filename)
object main_dib --holds the picture
main_dib=newDib(defalut_width,defalut_height)
object buffer_dib--main back buffer
buffer_dib=newDib(defalut_width,defalut_height)

clearDib(main_dib, {255,255,255})
clearDib(buffer_dib, {255,255,255})

integer zoom
zoom=1
integer image_width,image_height
image_width=defalut_width
image_height=defalut_height

integer view_left,view_top
view_left=0
view_top=0

integer mouse_pressed
mouse_pressed=0

integer mouse_startx,mouse_starty
mouse_startx=0
mouse_starty=0

integer draw_mode
draw_mode=1

integer filled
filled=0

integer line_size
line_size=1

object temp_dib
temp_dib=0

atom bmp_line,bmp_zoomin,bmp_zoomout,bmp_circel,bmp_fill,bmp_pen,bmp_rectangle
atom bmp_pick_color,bmp_spary,bmp_text
bmp_zoomin=loadBitmapFromFile("zoom in.bmp")
bmp_zoomout=loadBitmapFromFile("zoom out.bmp")
bmp_line=loadBitmapFromFile("line.bmp")
bmp_circel=loadBitmapFromFile("circel.bmp")
bmp_fill=loadBitmapFromFile("fill.bmp")
bmp_pen=loadBitmapFromFile("pen.bmp")
bmp_rectangle=loadBitmapFromFile("rectangle.bmp")
bmp_pick_color=loadBitmapFromFile("pick color.bmp")
bmp_spary=loadBitmapFromFile("spary.bmp")
bmp_text=loadBitmapFromFile("text.bmp")
setBitmap(PushButton1,bmp_zoomin)
setBitmap(PushButton2,bmp_zoomout)
setBitmap(PushButton3,bmp_line)
setBitmap(PushButton4,bmp_circel)
setBitmap(PushButton5,bmp_fill)
setBitmap(PushButton6,bmp_pen)
setBitmap(PushButton7,bmp_rectangle)
setBitmap(PushButton8,bmp_pick_color)
setBitmap(PushButton9,bmp_spary)
setBitmap(PushButton10,bmp_text)

atom bmp_outline,bmp_filled_outline,bmp_filled
bmp_outline=loadBitmapFromFile("outline.bmp")
bmp_filled_outline=loadBitmapFromFile("filled and outline.bmp")
bmp_filled=loadBitmapFromFile("filled.bmp")
setBitmap(PushButton13,bmp_outline)
setBitmap(PushButton14,bmp_filled_outline)
setBitmap(PushButton15,bmp_filled)
integer ret
  setCtlPosition(CWindow2,10,135)
  setCtlSize(CWindow2,50,70)

  ret=setParent(PushButton13,CWindow2)
  setCtlPosition(PushButton13,5,5)
  setVisible(PushButton13,0)
  ret=setParent(PushButton14,CWindow2)
  setCtlPosition(PushButton14,5,25)
  setVisible(PushButton14,0)
  ret=setParent(PushButton15,CWindow2)
  setCtlPosition(PushButton15,5,45)
  setVisible(PushButton15,0)

  setVisible(PushButton13,0)
  setVisible(PushButton14,0)
  setVisible(PushButton15,0)

atom color_left,color_right
color_left=0
color_right=rgb(255,255,255)

integer color_panle_top
color_panle_top=320

integer mouse_button
mouse_button=0

atom color_left2,color_right2
color_left2=0
color_right2=0

integer workspace_width,workspace_height
workspace_width=465
workspace_height=455

object text_dib
text_dib=0
--text_dib = extractDib(text_pixmap, 0, 0, 30, 20)

object undo_dib
undo_dib=0

procedure create_undo()
  if sequence(undo_dib) then
  	killDib(undo_dib)
  end if
  setEnable(MenuItem_140,1)
  undo_dib=newDib(image_width,image_height)
  copyDibToDib(undo_dib, main_dib)
end procedure

procedure destroy_undo()
  if sequence(undo_dib) then
    setEnable(MenuItem_140,0)
    if undo_dib[DibWidth]=main_dib[DibWidth] and undo_dib[DibHeight]=main_dib[DibHeight] then
      copyDibToDib(main_dib,undo_dib)
      killDib(undo_dib)
      undo_dib=0	
    else
      killDib(main_dib)
      killDib(buffer_dib)
      main_dib=newDib(undo_dib[DibWidth],undo_dib[DibHeight])
      buffer_dib=newDib(undo_dib[DibWidth],undo_dib[DibHeight])
      copyDibToDib(main_dib,undo_dib)
      image_width=undo_dib[DibWidth]
      image_height=undo_dib[DibHeight]
    end if	
  end if
end procedure

setEnable(MenuItem_140,0)--undo
--setEnable(MenuItem_115,0)--cut
--setEnable(MenuItem_116,0)--copy
--setEnable(MenuItem_117,0)--paste

procedure setWindowScrollRange2(integer id, integer typeScroll, atom min, atom max, atom pageSize)
    -- Martin : sets scroll range for window scrolbar

    atom sif
    atom lMask
    sequence lChangeSize
    integer lType

    -- store value


    --if ctrl_Type[ id ] != Window then
      --  typeScroll = SB_CTL
    if typeScroll != SB_HORZ then
        typeScroll = SB_VERT
    end if

    --if typeScroll = SB_HORZ then
      --  ctrl_Range[id][2] = {min,max}
    --else
      --  ctrl_Range[id][1] = {min,max}
    --end if

    -- Allocate structure
    sif = w32acquire_mem(0, SIZEOF_SCROLLINFO )

    -- store values
    if pageSize < 1 then
        lMask = SIF_RANGE
    else
        lMask = w32or_all({SIF_RANGE,SIF_PAGE,SIF_DISABLENOSCROLL})
        lChangeSize = getScrollChange({id, typeScroll})
        setScrollChange({id, typeScroll}, lChangeSize[1], pageSize)
    end if

    w32store( sif, sifSize, SIZEOF_SCROLLINFO )
    w32store( sif, sifMask, lMask )
    w32store( sif, sifMin, min )
    w32store( sif, sifMax, max )
    w32store( sif, sifPage, pageSize)


    VOID = w32Func( xSetScrollInfo,
                    {getHandle( id ),            -- handle
                     typeScroll,                     --
                     sif,                        -- pointer to structure
                     1 } )                       -- redraw flag

    -- Free structure
    w32release_mem( sif )
end procedure

setWindowScrollRange ( CWindow1, SB_HORZ, 0, image_width*zoom, zoom)
--setWindowScrollRange2 ( CWindow1, SB_HORZ, 0, 0, 1)
setWindowScrollRange ( CWindow1, SB_VERT, 0, image_height*zoom, zoom)
--setWindowScrollRange2 ( CWindow1, SB_VERT, 0, 0, 1)

setScrollChange( {CWindow1,SB_HORZ},  zoom ,zoom )
setScrollChange( {CWindow1,SB_VERT},  zoom ,zoom )

procedure draw_window1()
  setPenColor(Window1,Gray)
  drawLine(Window1,0,0,panle1_right,0)

  setPenColor(Window1,0)
  drawRectangle(Window1,0,5,color_panle_top,35,color_panle_top+30)
  setPenColor(Window1,color_left)
  drawRectangle(Window1,1,6,color_panle_top+1,34,color_panle_top+29)

  setPenColor(Window1,0)
  drawRectangle(Window1,0,38,color_panle_top,68,color_panle_top+30)
  setPenColor(Window1,color_right)
  drawRectangle(Window1,1,39,color_panle_top+1,67,color_panle_top+29)

  setTextColor(Window1,0)
  setPenPos( Window1, 5, color_panle_top+30 )
  wPuts(Window1,"Left")
  setPenPos( Window1, 35, color_panle_top+30 )
  wPuts(Window1,"Right")
end procedure

procedure mouse_window1(integer event,integer x,integer y)

  if event=WM_LBUTTONDBLCLK then
  	if x>=5 and x<=35 and y>=color_panle_top and y<=color_panle_top+30 then
  	  color_left = getColorDialog( Window1,color_left)
  	  draw_window1()
  	elsif x>=38 and x<=68 and y>=color_panle_top and y<=color_panle_top+30 then
  	  color_right = getColorDialog( Window1,color_right)
  	  draw_window1()
  	end if
  end if
end procedure

procedure draw_dib_block(integer x,integer y,sequence color)
atom address1
integer bytesline
address1 = buffer_dib[DibMemory]
bytesline= buffer_dib[DibBytesPerLine]
  for i=0 to zoom-1 do
  	for j=0 to zoom-1 do
  	  poke(address1 + 3 * (x+j) + (y+i) * bytesline,  color)
  	end for
  end for
end procedure

procedure draw_image_to_buffer()  --this needs to be has fast as posable
atom address1,address2
integer bytesline,xx,yy
xx=0
yy=0
address1 = main_dib[DibMemory]
address2 = buffer_dib[DibMemory]
bytesline= main_dib[DibBytesPerLine]
--poke(dib[DibMemory] + 3 * x + y * dib[DibBytesPerLine], color)  put
--peek({dib[DibMemory] + 3 * x + y * dib[DibBytesPerLine], 3})  get
if zoom=1 then
  for y=0 to image_height-1 do
    for x=0 to image_width-1 do
	  poke(address2 + 3 * x + y * bytesline,  peek({address1 + 3 * x + y * bytesline, 3}) )
    end for
  end for
else
  for y=0 to (image_height*zoom)-1 by zoom do
    for x=0 to (image_width*zoom)-1 by zoom do
		draw_dib_block(x,y, peek({address1 + 3 * xx + yy * bytesline, 3}) )	
		xx+=1
    end for
    yy+=1
    xx=0
  end for	
end if
	
end procedure

draw_image_to_buffer()--default int

procedure draw_image_to_workspace()
    drawDib(CWindow1, buffer_dib, 0, 0, view_left, view_top, image_width*zoom, image_height*zoom)
end procedure

function abs(integer x)
    if x < 0 then
        x = -x
    end if
    return x
end function--abs

sequence map_line_points
map_line_points={}

function make_line_point(integer x, integer y, integer w,sequence colors)
  if x>=0 and y>=0 and x<image_width and y<image_height then
    if w=1 then
      map_line_points=append(map_line_points,{x,y,colors})

    else
      if w<0 then
        w=abs(w)
        x-=(w-1)
        for i=w-1 to 0 by-1 do

          if x+i>=0 and x+i<image_width then
            map_line_points=append(map_line_points,{x+i,y,colors})

          else
            return 1
          end if
        end for
      else

        for i=0 to w-1 do
          if x+i>=0 and x+i<image_width then
            map_line_points=append(map_line_points,{x+i,y,colors})

          else
            return 1
          end if
        end for

      end if--w<0
    end if
  else
    return 1
  end if
  return 0
end function

sequence xor_line_points
xor_line_points={}

sequence block_dib
block_dib={}


function make_line_point2(integer x, integer y, integer w,sequence colors)
  if x>=0 and y>=0 and x<image_width and y<image_height then
    if w=1 then
      map_line_points=append(map_line_points,{x,y,  rgbs ( xor_bits( rgbs2(getDibPixel(main_dib, x, y) ), rgb(255,255,255) ))  })
      xor_line_points=append(xor_line_points,{x,y, getDibPixel(main_dib, x, y) })
    else
      if w<0 then
        w=abs(w)
        x-=(w-1)
        for i=w-1 to 0 by-1 do

          if x+i>=0 and x+i<image_width then
            --xor_bits( getDibPixel(main_dib, x+i, y), {0,0,0} )
            map_line_points=append(map_line_points,{x+i,y,  rgbs( xor_bits( rgbs2(getDibPixel(main_dib, x+i, y)), rgb(255,255,255) )) })
            xor_line_points=append(xor_line_points,{x+i,y, getDibPixel(main_dib, x, y) })
          else
            return 1
          end if
        end for
      else

        for i=0 to w-1 do
          if x+i>=0 and x+i<image_width then
            --xor_bits( getDibPixel(main_dib, x+i, y), {0,0,0} )
            map_line_points=append(map_line_points,{x+i,y,  rgbs (xor_bits( rgbs2( getDibPixel(main_dib, x+i, y) ) , rgb(255,255,255) ) ) })
            xor_line_points=append(xor_line_points,{x+i,y, getDibPixel(main_dib, x, y) })
          else
            return 1
          end if
        end for

      end if--w<0
    end if
  else
    return 1
  end if
  return 0
end function

procedure xorline_vscreen(integer x, integer y, integer x2, integer y2,sequence colors)
integer deltax, deltay, numpixels,
        d, dinc1, dinc2,
        xx, xinc1, xinc2,
        yy, yinc1, yinc2

    integer w, h
    w=image_width
    h=image_height

    deltax = abs(x2 - x)
    deltay = abs(y2 - y)


    if deltay = 0 then

      if x<x2 then --left
        if deltax=0 then
          deltax=1
        end if
        if deltax>=2 then
          deltax+=1
        end if
        if x+1=x2 then
          deltax=2
        end if
        if make_line_point2(x, y, deltax,colors) then
          return
        end if

      else --right

        if deltax<1 then
          deltax=1
        end if

        if deltax>=2 then
          deltax+=1
        end if

        if x2+1=x then
          deltax=2
        end if
        if make_line_point2(x, y, -deltax,colors) then
          return
        end if

      end if
        return
    end if

    xinc2 = 1
    yinc2 = 1

    if deltax >= deltay then
        numpixels = deltax + 1
        d = (2 * deltay) - deltax
        dinc1 = deltay * 2
        dinc2 = (deltay - deltax) * 2
        xinc1 = 1
        yinc1 = 0
    else
        numpixels = deltay + 1
        d = (2 * deltax) - deltay
        dinc1 = deltax * 2
        dinc2 = (deltax - deltay) * 2
        xinc1 = 0
        yinc1 = 1
    end if
    if x > x2 then
        xinc1 = -xinc1
        xinc2 = -xinc2
    end if
    if y > y2 then
        yinc1 = -yinc1
        yinc2 = -yinc2
    end if

    xx = x
    yy = y

    for i = 1 to numpixels do

        if make_line_point2(xx, yy, 1,colors) then
          return
        end if
        if d < 0 then
            d = d + dinc1
            xx = xx + xinc1
            yy = yy + yinc1
        else
            d = d + dinc2
            xx = xx + xinc2
            yy = yy + yinc2
        end if
    end for
end procedure

procedure xor_rectangle( integer x,integer y,integer x2, integer y2,sequence colors)

	xorline_vscreen(x,y ,x2 ,y ,colors)--top
	xorline_vscreen(x,y2 ,x2 ,y2 ,colors)--bottom
	xorline_vscreen(x,y ,x ,y2 ,colors)--left
	xorline_vscreen(x2,y ,x2 ,y2 ,colors)--right
	
end procedure

procedure line_vscreen(integer x, integer y, integer x2, integer y2,sequence colors)
integer deltax, deltay, numpixels,
        d, dinc1, dinc2,
        xx, xinc1, xinc2,
        yy, yinc1, yinc2

    integer w, h
    w=image_width
    h=image_height

    deltax = abs(x2 - x)
    deltay = abs(y2 - y)


    if deltay = 0 then

      if x<x2 then --left
        if deltax=0 then
          deltax=1
        end if
        if deltax>=2 then
          deltax+=1
        end if
        if x+1=x2 then
          deltax=2
        end if
        if make_line_point(x, y, deltax,colors) then
          return
        end if

      else --right

        if deltax<1 then
          deltax=1
        end if

        if deltax>=2 then
          deltax+=1
        end if

        if x2+1=x then
          deltax=2
        end if
        if make_line_point(x, y, -deltax,colors) then
          return
        end if

      end if
        return
    end if

    xinc2 = 1
    yinc2 = 1

    if deltax >= deltay then
        numpixels = deltax + 1
        d = (2 * deltay) - deltax
        dinc1 = deltay * 2
        dinc2 = (deltay - deltax) * 2
        xinc1 = 1
        yinc1 = 0
    else
        numpixels = deltay + 1
        d = (2 * deltax) - deltay
        dinc1 = deltax * 2
        dinc2 = (deltax - deltay) * 2
        xinc1 = 0
        yinc1 = 1
    end if
    if x > x2 then
        xinc1 = -xinc1
        xinc2 = -xinc2
    end if
    if y > y2 then
        yinc1 = -yinc1
        yinc2 = -yinc2
    end if

    xx = x
    yy = y

    for i = 1 to numpixels do

        if make_line_point(xx, yy, 1,colors) then
          return
        end if
        if d < 0 then
            d = d + dinc1
            xx = xx + xinc1
            yy = yy + yinc1
        else
            d = d + dinc2
            xx = xx + xinc2
            yy = yy + yinc2
        end if
    end for
end procedure


procedure vrectangle(integer f, integer x,integer y,integer x2, integer y2,sequence colors)
  if f then
    if y<y2 then
      for yy=y to y2 do
      	line_vscreen(x,yy ,x2 ,yy ,colors)--top
      end for
    else
      for yy=y2 to y do
      	line_vscreen(x,yy ,x2 ,yy ,colors)--top
      end for
    end if
  else
	line_vscreen(x,y ,x2 ,y ,colors)--top
	line_vscreen(x,y2 ,x2 ,y2 ,colors)--bottom
	line_vscreen(x,y ,x ,y2 ,colors)--left
	line_vscreen(x2,y ,x2 ,y2 ,colors)--right
  end if
	
end procedure

procedure map_set(integer pos, integer w,sequence colors)
  integer line,position
  w=abs(w)
  line=floor(pos/image_width)
  position=(pos-(image_width*line))


if line>=0 and line<image_height  then
  if line>=0 and position>=0 then
    if position+w>=0 and position+w<image_width then
      for i=0 to w do
         if position+i>=0 and position+i<image_width then
           map_line_points=append(map_line_points,{position+i,line,colors})	
         end if

      end for
    else
      for i=0 to w do
        if position+i>=0 and position+i<image_width then
          map_line_points=append(map_line_points,{position+i,line,colors})
        end if
      end for
    end if
  else

      for i=0 to w do
        if position+i>=0 and position+i<image_width then

          map_line_points=append(map_line_points,{position+i,line,colors})
        end if

      end for

  end if

end  if

end procedure

procedure vellipse(integer f,sequence s1,sequence s2,sequence colors)
    -- draw ellipse
    atom a11,a12,a21,a22,a,w
    integer d,dx,dy,m,n,r,rx,ry,x,x2,y,y2
    s1=floor(s1)
    s2=floor(s2)
    m=s2[1]-s1[1]
    n=s2[2]-s1[2]
    dx=4*m*m
    dy=4*n*n
    r=m*n*n
    rx=2*r

    a=0
    w=image_width

    if not f then   -- hollow ellipse
        x=floor(m/2)
        a11=a+s1[1]+(s1[2]+floor(n/2))*w
        a12=a11+m
        if and_bits(n,1) then   -- odd n
            a21=a11+w
            a22=a12+w

            --poke(a21,c)
            map_set(a21,0,colors)
            --poke(a22,c)
            map_set(a22,0,colors)
            ry=dx/2
            r-=ry
        else                    -- even n
            a21=a11
            a22=a12
            ry=0
        end if
        --poke(a11,c)
        map_set(a11,0,colors)
        --poke(a12,c)
        map_set(a12,0,colors)
        while x>0 do
            if r>0 then
                a11-=w
                a12-=w
                a21+=w
                a22+=w
                ry+=dx
                r-=ry
            end if
            if r<=0 then
                x-=1
                rx-=dy
                r+=rx
                a11+=1
                a12-=1
                a21+=1
                a22-=1
            end if
            --poke(a11,c)
            map_set(a11,0,colors)
            --poke(a12,c)
            map_set(a12,0,colors)
            --poke(a21,c)
            map_set(a21,0,colors)
            --poke(a22,c)
            map_set(a22,0,colors)
        end while
    else   -- plain color fill
        x=m+1
        a11=a+s1[1]+(s1[2]+floor(n/2))*w
        if and_bits(n,1) then   -- odd n
            a21=a11+w
            --mem_set(a21,c,x)

            map_set(a21-a,x,colors)

            ry=dx/2
            r-=ry
        else                    -- even n
            a21=a11
            ry=0
        end if
        --mem_set(a11,c,x)

        map_set(a11-a,x,colors)

        while x>1 do
            if r>0 then
                a11-=w
                a21+=w
                ry+=dx
                r-=ry
            end if
            if r<=0 then
                x-=2
                rx-=dy
                r+=rx
                a11+=1
                a21+=1

            end if
            --mem_set(a11,c,x)
            map_set(a11-a,x,colors)
            --mem_set(a21,c,x)
            map_set(a21-a,x,colors)
        end while

    end if
end procedure -- vellipse


function eufill(sequence bitmap, sequence start_loc, atom new_color)
    sequence buffer
    atom old_color, bm_width, bm_height, buf_len, ptr1, ptr2, cur_x, cur_y
    old_color = bitmap[start_loc[2]][start_loc[1]]
    if old_color = new_color then
        return bitmap
    end if
    bm_height = length(bitmap)
    bm_width = length(bitmap[1])
    buf_len = bm_height+bm_width
    buffer = repeat(0, buf_len)
    buffer[1] = start_loc
    bitmap[start_loc[2]][start_loc[1]] = new_color
    ptr1 = 1
    ptr2 = 2
    while ptr1 != ptr2 do
        cur_x = buffer[ptr1][1]
        cur_y = buffer[ptr1][2]
        if cur_x > 1 then
            if bitmap[cur_y][cur_x-1] = old_color then
                buffer[ptr2] = {cur_x-1, cur_y}
                bitmap[cur_y][cur_x-1] = new_color
                ptr2 = ptr2 + 1
                if ptr2 > buf_len then
                    ptr2 = 1
                end if
            end if
        end if
        if cur_x < bm_width then
            if bitmap[cur_y][cur_x+1] = old_color then
                buffer[ptr2] = {cur_x+1, cur_y}
                bitmap[cur_y][cur_x+1] = new_color
                ptr2 = ptr2 + 1
                if ptr2 > buf_len then
                    ptr2 = 1
                end if
            end if
        end if
        if cur_y > 1 then
            if bitmap[cur_y-1][cur_x] = old_color then
                buffer[ptr2] = {cur_x, cur_y-1}
                bitmap[cur_y-1][cur_x] = new_color
                ptr2 = ptr2 + 1
                if ptr2 > buf_len then
                    ptr2 = 1
                end if
            end if
        end if
        if cur_y < bm_height then
            if bitmap[cur_y+1][cur_x] = old_color then
                buffer[ptr2] = {cur_x, cur_y+1}
                bitmap[cur_y+1][cur_x] = new_color
                ptr2 = ptr2 + 1
                if ptr2 > buf_len then
                    ptr2 = 1
                end if
            end if
        end if
        ptr1 = ptr1 + 1
        if ptr1 > buf_len then
            ptr1 = 1
        end if
    end while
    return bitmap
end function  -- eufill

function main_dib_to_sequence()
sequence bitmap
atom address1
integer bytesline,xx,yy
xx=0
yy=0
address1 = main_dib[DibMemory]
bytesline= main_dib[DibBytesPerLine]

bitmap={}
for i=0 to image_height-1 do
  bitmap=append(bitmap,repeat(0,image_width))
end for

if zoom=1 then
  for y=0 to image_height-1 do
    for x=0 to image_width-1 do
	  bitmap[y+1][x+1]= rgbs2( peek({address1 + 3 * x + y * bytesline, 3}) )
    end for
  end for
else
  for y=0 to (image_height*zoom)-1 by zoom do
    for x=0 to (image_width*zoom)-1 by zoom do
	 bitmap[yy+1][xx+1]= rgbs2( peek({address1 + 3 * xx + yy * bytesline, 3}) )
	 xx+=1
    end for
    yy+=1
    xx=0
  end for	
end if
  return bitmap
end function

procedure fill_vscreen(integer x, integer y,atom color)
sequence bitmap

  bitmap=eufill(main_dib_to_sequence(), {x+1,y+1}, color)
  for yy=0 to image_height-1 do
  	for xx=0 to image_width-1 do
  	  fastPutDibPixel(main_dib, xx,yy, rgbs( bitmap[yy+1][xx+1] ))
  	end for
  end for
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure

integer spray_x,spray_y,spray_t
spray_x=0
spray_y=0
spray_t=0

sequence spray_points
spray_points={}

function remove_line(sequence string, integer line)
sequence temp
integer len
len=length(string)
if line=1 then
  return string[2..len]
elsif line=len then
  return string[1..len-1]
else
  temp=string[1..line-1]
  return temp&string[line+1..len]
end if
end function

function choose_random_spray(sequence info)
  integer num
  num=rand(length(info))
  spray_points=remove_line(spray_points,num)
  return info[num]
end function

procedure vspray_int()
  setTimer(Window1,1001,spray_t)
  map_line_points={}
  spray_points={}
  if spray_x-3<0 then
  	spray_x=3
  end if
  vellipse(1,{spray_x-3,spray_y-3},{spray_x+3,spray_y+3},rgbs(color_left2))
  spray_points=map_line_points
  map_line_points={}
end procedure

procedure vspray_move()
	sequence temp
	temp=map_line_points
	map_line_points={}
    vellipse(1,{spray_x-3,spray_y-3},{spray_x+3,spray_y+3},rgbs(color_left2))
    spray_points=map_line_points
    map_line_points=temp
end procedure

procedure mouse_workspace(integer event,integer x,integer y)
  x+=view_left
  y+=view_top

  if x>=0 and y>=0 and x<(image_width*zoom) and y<(image_height*zoom) then
    if zoom=1 then
      setText(StatusBar1,"X: "&sprint(x)&" Y: "&sprint(y))
    else
      setText(StatusBar1,"X: "&sprint(floor(x/zoom))&" Y: "&sprint(floor(y/zoom)))	
    end if
  	
  end if

  if mouse_pressed=0 and event=LeftDown and x>=0 and y>=0 and x<(image_width*zoom) and y<(image_height*zoom) then
    mouse_button=LeftDown
    map_line_points={}
    color_left2=color_left
    color_right2=color_right

    if draw_mode=3 then
      --draw_dib_block(x,y,rgbs(color_left))
      --draw_image_to_workspace()	
    elsif draw_mode=4 then
      create_undo()
      fill_vscreen(floor(x/zoom),floor(y/zoom),color_left2)	
      return
    elsif draw_mode=6 then
      color_left= rgbs2( getDibPixel(main_dib, floor(x/zoom),floor(y/zoom)) )
      draw_window1()
    elsif draw_mode=7 then--spary
      spray_x= floor(x/zoom)
      spray_y= floor(y/zoom)
      vspray_int()
    end if

  	mouse_pressed=1
  	if zoom=1 then
  	  mouse_startx=x
      mouse_starty=y	
    else
      mouse_startx= floor(x/zoom)
      mouse_starty= floor(y/zoom)
      draw_image_to_buffer()
      temp_dib=newDib(image_width*zoom,image_height*zoom)
      copyDibToDib( temp_dib,buffer_dib)
  	end if
  	
  	captureMouse( CWindow1)
  	
  elsif mouse_pressed=0 and event=RightDown and x>=0 and y>=0 and x<(image_width*zoom) and y<(image_height*zoom) then
    mouse_button=RightDown
    map_line_points={}
    color_left2=color_right
    color_right2=color_left

  	if draw_mode=3 then
      --draw_dib_block(x,y,rgbs(color_left))
      --draw_image_to_workspace()	
    elsif draw_mode=4 then
      create_undo()
      fill_vscreen(floor(x/zoom),floor(y/zoom),color_left2)	
      return
    elsif draw_mode=6 then
      color_right= rgbs2( getDibPixel(main_dib, floor(x/zoom),floor(y/zoom)) )
      draw_window1()
      return
    elsif draw_mode=7 then--spary
      spray_x= floor(x/zoom)
      spray_y= floor(y/zoom)
      vspray_int()
    end if

    mouse_pressed=1
  	if zoom=1 then
  	  mouse_startx=x
      mouse_starty=y	
    else
      mouse_startx= floor(x/zoom)
      mouse_starty= floor(y/zoom)
      draw_image_to_buffer()
      temp_dib=newDib(image_width*zoom,image_height*zoom)
      copyDibToDib( temp_dib,buffer_dib)
  	end if
  	
  	captureMouse( CWindow1)
  	
  end if

  if mouse_pressed=1 and event=LeftUp then

    mouse_pressed=0
    releaseMouse()

    if draw_mode=7 then--spary
      killTimer(Window1,1001)
      --map_line_points=spray_points
    end if

    if mouse_button=LeftDown then
      create_undo()
      for i=1 to length(map_line_points) do--draw to main dib
        fastPutDibPixel(main_dib, map_line_points[i][1],map_line_points[i][2],map_line_points[i][3])
      end for
    else
      if draw_mode=3 then
        draw_image_to_buffer()
        draw_image_to_workspace()
      else
        if zoom=1 then
      	  copyDibToDib(buffer_dib, main_dib)
        else
          copyDibToDib(buffer_dib, temp_dib)
        end if

        draw_image_to_workspace()
      end if
    end if
    if sequence(temp_dib) then
      killDib(temp_dib)
      temp_dib=0
    end if

  elsif mouse_pressed=1 and event=RightUp then

  	mouse_pressed=0
    releaseMouse()

    if draw_mode=7 then--spary
      killTimer(Window1,1001)
      --map_line_points=spray_points
    end if

    if mouse_button=RightDown then
      create_undo()
      for i=1 to length(map_line_points) do--draw to main dib
        fastPutDibPixel(main_dib, map_line_points[i][1],map_line_points[i][2],map_line_points[i][3])
      end for
    else
      if draw_mode=3 then
        draw_image_to_buffer()
        draw_image_to_workspace()
      else
        if zoom=1 then
      	  copyDibToDib(buffer_dib, main_dib)
        else
          copyDibToDib(buffer_dib, temp_dib)
        end if
        draw_image_to_workspace()
      end if
    end if
    if sequence(temp_dib) then
      killDib(temp_dib)
      temp_dib=0
    end if

  elsif mouse_pressed=1 and event=MouseMove then
    --map_line_points={} cant put this here

    if zoom=1 then
      copyDibToDib(buffer_dib, main_dib)
      if draw_mode=1 then
        map_line_points={}
        line_vscreen(mouse_startx,mouse_starty, x, y,rgbs(color_left2))

      elsif draw_mode=2 then
      	map_line_points={}
      	
        if mouse_startx<x  then
          if x>=(image_width-1) then
	        x=image_width-1
	        if filled=1 then
	        	x-=1
	        end if
	      end if
	
	      if y>=image_height-1 then
	        y=image_height-1
	      end if
	      if y<0 then
	        y=0	
	      end if
	
	      if filled=1 then
            vellipse(filled,{mouse_startx,mouse_starty},{x,y},rgbs(color_right2))
            vellipse(0,{mouse_startx,mouse_starty},{x+1,y},rgbs(color_left2))
          elsif filled=2 then
          	
          else
	        vellipse(0,{mouse_startx,mouse_starty},{x,y},rgbs(color_left2))
          end if
      	
      	
        else
          if x<0 then
	        x=0	
	      end if
	      if y<0 then
	        y=0	
	      end if
	      if y>=image_height-1 then
	        y=image_height-1
	      end if
	

          if filled=1 then
            vellipse(filled,{x,mouse_starty},{mouse_startx,y},rgbs(color_right2))
            vellipse(0,{x,mouse_starty},{mouse_startx+1,y},rgbs(color_left2))
          elsif filled=2 then

          else
	        vellipse(0,{x,mouse_starty},{mouse_startx,y},rgbs(color_left2))
          end if

        end if
      elsif draw_mode=3 then

        if floor(x/zoom)>=0 and floor(x/zoom)<image_width and floor(y/zoom)>=0 and floor(y/zoom)<image_height then
          map_line_points=append(map_line_points,{floor(x/zoom),floor(y/zoom),rgbs(color_left2)})	
        end if
      elsif draw_mode=5 then
        map_line_points={}
      	vrectangle(filled,mouse_startx ,mouse_starty ,floor(x/zoom), floor(y/zoom),rgbs(color_left2))
      elsif draw_mode=7 then
      	spray_x= floor(x/zoom)
        spray_y= floor(y/zoom)
        vspray_move()
      elsif draw_mode=8 then

      elsif draw_mode=9 then
        map_line_points={}
        xor_line_points={}
      	xor_rectangle(mouse_startx ,mouse_starty ,floor(x/zoom), floor(y/zoom),{0,0,0})
      end if

    else
      copyDibToDib(buffer_dib, temp_dib)
      if draw_mode=1 then
        map_line_points={}
        line_vscreen(mouse_startx,mouse_starty, floor(x/zoom), floor(y/zoom),rgbs(color_left2))
	  elsif draw_mode=2 then
	    map_line_points={}
	    if mouse_startx<floor(x/zoom)  then
	      if floor(x/zoom)>=(image_width-1) then
	        x=(image_width*zoom)-(zoom+1)
	        if filled=0 then
	        	x+=1
	        end if
	      end if
	
	      if floor(y/zoom)>=(image_height-1) then
	        y=(image_height*zoom)-(zoom)
	      end if
	      if floor(y/zoom)<0 then
	        y=zoom-1	
	      end if
	
          if filled=1 then
            vellipse(filled,{mouse_startx,mouse_starty},{floor(x/zoom), floor(y/zoom)},rgbs(color_right2))
            vellipse(0,{mouse_startx,mouse_starty},{floor(x/zoom)+1, floor(y/zoom)},rgbs(color_left2))
          elsif filled=2 then

          else
	        vellipse(0,{mouse_startx,mouse_starty},{floor(x/zoom), floor(y/zoom)},rgbs(color_left2))
          end if
	
	    else
	      if floor(x/zoom)<0 then
	        x=zoom-1	
	      end if
	      if floor(y/zoom)<0 then
	        y=zoom-1	
	      end if
	      if floor(y/zoom)>=(image_height-1) then
	        y=(image_height*zoom)-(zoom)
	      end if
	
	
	      if filled=1 then
	        vellipse(filled,{floor(x/zoom),mouse_starty },{mouse_startx,floor(y/zoom)},rgbs(color_right2))
	        vellipse(0,{floor(x/zoom),mouse_starty },{mouse_startx+1,floor(y/zoom)},rgbs(color_left2))
	      elsif filled=2 then
	
	      else
	        vellipse(0,{floor(x/zoom),mouse_starty },{mouse_startx,floor(y/zoom)},rgbs(color_left2))
	      end if
        end if
      elsif draw_mode=3 then

        if floor(x/zoom)>=0 and floor(x/zoom)<image_width and floor(y/zoom)>=0 and floor(y/zoom)<image_height then
          map_line_points=append(map_line_points,{floor(x/zoom),floor(y/zoom),rgbs(color_left2)})	
        end if
      elsif draw_mode=5 then
        map_line_points={}
      	vrectangle(filled,mouse_startx ,mouse_starty ,floor(x/zoom), floor(y/zoom),rgbs(color_left2))
      elsif draw_mode=7 then
      	spray_x= floor(x/zoom)
        spray_y= floor(y/zoom)
        vspray_move()
      elsif draw_mode=8 then
      	
      elsif draw_mode=9 then
        map_line_points={}
        xor_line_points={}
      	xor_rectangle(mouse_startx ,mouse_starty ,floor(x/zoom), floor(y/zoom),{0,0,0})
      end if
    end if

    if zoom=1 then
      for i=1 to length(map_line_points) do
       	draw_dib_block(map_line_points[i][1],map_line_points[i][2],map_line_points[i][3])
      end for
    else
      for i=1 to length(map_line_points) do
       	draw_dib_block(map_line_points[i][1]*zoom,map_line_points[i][2]*zoom,map_line_points[i][3])
      end for
    end if	

    draw_image_to_workspace()
  end if
	
end procedure
--------------------------------------------------------------------------------
procedure Window1_onMouse (integer self, integer event, sequence params)--params is ( int event, int x, int y, int shift, int wheelmove )
  mouse_window1(params[1],params[2],params[3])
end procedure
setHandler( Window1, w32HMouse, routine_id("Window1_onMouse"))
--------------------------------------------------------------------------------
procedure Window1_onPaint (integer self, integer event, sequence params)--params is ( int x1, int y1, int x2, int y2 )
  draw_window1()
  draw_image_to_workspace()
end procedure
setHandler( Window1, w32HPaint, routine_id("Window1_onPaint"))
--------------------------------------------------------------------------------
procedure Window1_onResize (integer self, integer event, sequence params)--params is ( int style, int cx, int cy )
sequence size
  size=getCtlSize(Window1)
  setCtlSize(CWindow1,size[1]-panle1_right-8,size[2]-64)
  workspace_width=(size[1]-panle1_right-8)-20
  workspace_height=(size[2]-64)-20

  if (image_width*zoom)>workspace_width or (image_height*zoom)>workspace_height then

     setWindowScrollRange ( CWindow1, SB_HORZ, 0,  ((image_width*zoom)-(workspace_width*zoom)) , 1)
     --?floor( ((image_width*zoom)-workspace_width) /zoom)
     setWindowScrollRange ( CWindow1, SB_VERT, 0,  ((image_height*zoom)-(workspace_height*zoom))  , 1)

     setScrollChange( {CWindow1,SB_HORZ},  1 ,1 )
     setScrollChange( {CWindow1,SB_VERT},  1 ,1 )
  else
    setWindowScrollRange2 ( CWindow1, SB_HORZ, 0, 0, 1)
    setWindowScrollRange2 ( CWindow1, SB_VERT, 0, 0, 1)
  end if
end procedure
setHandler( Window1, w32HResize, routine_id("Window1_onResize"))
--------------------------------------------------------------------------------
procedure Window1_onTimer (integer self, integer event, sequence params)--params is ( int timerId)
 if length(spray_points) then
 	
  map_line_points=append(map_line_points, choose_random_spray(spray_points) )

  if zoom=1 then
    for i=1 to length(map_line_points) do
      draw_dib_block(map_line_points[i][1],map_line_points[i][2],map_line_points[i][3])
    end for
  else
    for i=1 to length(map_line_points) do
      draw_dib_block(map_line_points[i][1]*zoom,map_line_points[i][2]*zoom,map_line_points[i][3])
    end for
  end if	

  draw_image_to_workspace()
 end if
end procedure
setHandler( Window1, w32HTimer, routine_id("Window1_onTimer"))
--------------------------------------------------------------------------------
procedure MenuItem_102_onClick (integer self, integer event, sequence params)--params is ()
  openWindow(Window2,Modal)
end procedure
setHandler( MenuItem_102, w32HClick, routine_id("MenuItem_102_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_104_onClick (integer self, integer event, sequence params)--params is ()
  sequence fname
  integer ret
  fname=getOpenFileName(Window1,"",imagefiletypes)
  if length(fname)>0 then
    if save_changes=1 then
      ret = message_box("Save the changes to "&filename,"Warning",{MB_ICONWARNING,MB_YESNOCANCEL})
      if ret=IDYES then

      elsif ret=IDNO then

      elsif ret=IDCANCEL then
        return --exit
      end if
    end if

    if sequence(main_dib) then
      killDib(main_dib)
    end if
    if sequence(buffer_dib) then
      killDib(buffer_dib)	
    end if

  	main_dib = loadFreeDib(fname)
  	
  	if sequence(main_dib) then
  	  filename=fname
  	  setText(Window1,"Image Editor - "&get_file_fullname_part(filename))
  	  image_width=main_dib[DibWidth]
  	  image_height=main_dib[DibHeight]
  	  buffer_dib=newDib(image_width,image_height)
  	  zoom=1
  	  filled=0
  	  color_left=0
      color_right=rgb(255,255,255)
  	  draw_mode=1
  	  draw_image_to_buffer()
  	  repaintWindow(CWindow1)
      --draw_image_to_workspace()
  	else
	  puts(1,"sorry unable to open picture "&filename&"\n")
  	end if

  end if
end procedure
setHandler( MenuItem_104, w32HClick, routine_id("MenuItem_104_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_105_onClick (integer self, integer event, sequence params)--params is ()
integer result
  result = saveDib(main_dib, "bitmap2.bmp", 0, 0, image_width, image_height)

  if result then

  end if
end procedure
setHandler( MenuItem_105, w32HClick, routine_id("MenuItem_105_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_140_onClick (integer self, integer event, sequence params)--params is ()
  destroy_undo()
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_140, w32HClick, routine_id("MenuItem_140_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_118_onClick (integer self, integer event, sequence params)--params is ()
  flipDibHor(main_dib)
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_118, w32HClick, routine_id("MenuItem_118_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_119_onClick (integer self, integer event, sequence params)--params is ()
  flipDibVert(main_dib)
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_119, w32HClick, routine_id("MenuItem_119_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_121_onClick (integer self, integer event, sequence params)--params is ()
   main_dib= rotateDib(main_dib, 90, True)
   if main_dib[DibWidth]!=image_width or main_dib[DibHeight]!=image_height then
   	 image_width=main_dib[DibWidth]
     image_height=main_dib[DibHeight]
     killDib(buffer_dib)
     buffer_dib=newDib(image_width*zoom,image_height*zoom)
   end if

   draw_image_to_buffer()
   repaintWindow(CWindow1)
end procedure
setHandler( MenuItem_121, w32HClick, routine_id("MenuItem_121_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_122_onClick (integer self, integer event, sequence params)--params is ()
   main_dib= rotateDib(main_dib, 180, True)
   if main_dib[DibWidth]!=image_width or main_dib[DibHeight]!=image_height then
   	 image_width=main_dib[DibWidth]
     image_height=main_dib[DibHeight]
     killDib(buffer_dib)
     buffer_dib=newDib(image_width*zoom,image_height*zoom)
   end if

   draw_image_to_buffer()
   repaintWindow(CWindow1)
end procedure
setHandler( MenuItem_122, w32HClick, routine_id("MenuItem_122_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_123_onClick (integer self, integer event, sequence params)--params is ()
   main_dib= rotateDib(main_dib, 270, True)
   if main_dib[DibWidth]!=image_width or main_dib[DibHeight]!=image_height then
   	 image_width=main_dib[DibWidth]
     image_height=main_dib[DibHeight]
     killDib(buffer_dib)
     buffer_dib=newDib(image_width*zoom,image_height*zoom)
   end if

   draw_image_to_buffer()
   repaintWindow(CWindow1)
end procedure
setHandler( MenuItem_123, w32HClick, routine_id("MenuItem_123_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_126_onClick (integer self, integer event, sequence params)--params is ()
  create_undo()
  main_dib = scaleDib(main_dib, image_width-10, image_height-10, True)

  if main_dib[DibWidth]!=image_width or main_dib[DibHeight]!=image_height then
   	 image_width=main_dib[DibWidth]
     image_height=main_dib[DibHeight]
     killDib(buffer_dib)
     buffer_dib=newDib(image_width*zoom,image_height*zoom)
  end if

  draw_image_to_buffer()
  repaintWindow(CWindow1)
end procedure
setHandler( MenuItem_126, w32HClick, routine_id("MenuItem_126_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_110_onClick (integer self, integer event, sequence params)--params is ()
  clearDib(main_dib, rgbs(color_right))

  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_110, w32HClick, routine_id("MenuItem_110_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_130_onClick (integer self, integer event, sequence params)--params is ()
  colorizeDib(main_dib, rgbs(color_right))
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_130, w32HClick, routine_id("MenuItem_130_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_111_onClick (integer self, integer event, sequence params)--params is ()
  for y=0 to image_height-1 do
  	for x=0 to image_width-1 do
  	  if equal(getDibPixel(main_dib, x, y),rgbs(color_left)) then
  	  	putDibPixel(main_dib, x, y, rgbs(color_right))
  	  end if
  	end for
  end for
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_111, w32HClick, routine_id("MenuItem_111_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_135_onClick (integer self, integer event, sequence params)--params is ()
  embossDib(main_dib, rgbs(color_right))
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_135, w32HClick, routine_id("MenuItem_135_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_129_onClick (integer self, integer event, sequence params)--params is ()
  makeDibGray(main_dib)
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_129, w32HClick, routine_id("MenuItem_129_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_128_onClick (integer self, integer event, sequence params)--params is ()
  invertDib(main_dib)
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_128, w32HClick, routine_id("MenuItem_128_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_112_onClick (integer self, integer event, sequence params)--params is ()
  blurDib(main_dib)
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_112, w32HClick, routine_id("MenuItem_112_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_133_onClick (integer self, integer event, sequence params)--params is ()
  subtleBlurDib(main_dib)
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_133, w32HClick, routine_id("MenuItem_133_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_132_onClick (integer self, integer event, sequence params)--params is ()
  sharpenDib(main_dib)
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_132, w32HClick, routine_id("MenuItem_132_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_134_onClick (integer self, integer event, sequence params)--params is ()
  subtleSharpenDib(main_dib)
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_134, w32HClick, routine_id("MenuItem_134_onClick"))
--------------------------------------------------------------------------------
procedure MenuItem_136_onClick (integer self, integer event, sequence params)--params is ()
  detectDibEdges(main_dib)
  draw_image_to_buffer()
  draw_image_to_workspace()
end procedure
setHandler( MenuItem_136, w32HClick, routine_id("MenuItem_136_onClick"))
--------------------------------------------------------------------------------
procedure CWindow1_onMouse (integer self, integer event, sequence params)--params is ( int event, int x, int y, int shift, int wheelmove )
  mouse_workspace(params[1],params[2],params[3])
end procedure
setHandler( CWindow1, w32HMouse, routine_id("CWindow1_onMouse"))
--------------------------------------------------------------------------------
procedure CWindow1_onPaint (integer self, integer event, sequence params)--params is ( int x1, int y1, int x2, int y2 )
  draw_image_to_workspace()
end procedure
setHandler( CWindow1, w32HPaint, routine_id("CWindow1_onPaint"))
--------------------------------------------------------------------------------
procedure CWindow1_onScroll (integer self, integer event, sequence params)--params is ( int pos )
  view_left=getScrollPos( {CWindow1, SB_HORZ} )*zoom
  view_top=getScrollPos( {CWindow1, SB_VERT} )*zoom
  draw_image_to_workspace()
end procedure
setHandler( CWindow1, w32HScroll, routine_id("CWindow1_onScroll"))
--------------------------------------------------------------------------------
procedure PushButton1_onClick (integer self, integer event, sequence params)--params is ()
  if zoom<12 then
    zoom+=1

    killDib(buffer_dib)
    buffer_dib=newDib(image_width*zoom,image_height*zoom)
    draw_image_to_buffer()--default int
    --draw_image_to_workspace()	
    repaintWindow(CWindow1)
    if (image_width*zoom)+zoom>workspace_width or (image_height*zoom)+zoom>workspace_height then
     setWindowScrollRange ( CWindow1, SB_HORZ, 0, floor( ((image_width*zoom)-workspace_width) /zoom)+1, 1)
     --?floor( ((image_width*zoom)-workspace_width) /zoom)
     setWindowScrollRange ( CWindow1, SB_VERT, 0, floor( ((image_height*zoom)-workspace_height) /zoom)+1 , 1)

     setScrollChange( {CWindow1,SB_HORZ},  zoom , floor( ((image_height*zoom)-workspace_height) /zoom)+1)
     setScrollChange( {CWindow1,SB_VERT},  zoom , floor( ((image_height*zoom)-workspace_height) /zoom)+1)
    else
     setWindowScrollRange2 ( CWindow1, SB_HORZ, 0, 0, 1)
     setWindowScrollRange2 ( CWindow1, SB_VERT, 0, 0, 1)
    end if

  end if

end procedure
setHandler( PushButton1, w32HClick, routine_id("PushButton1_onClick"))
--------------------------------------------------------------------------------
procedure PushButton2_onClick (integer self, integer event, sequence params)--params is ()
  if zoom>1 then
    zoom-=1

    killDib(buffer_dib)
    buffer_dib=newDib(image_width*zoom,image_height*zoom)
    draw_image_to_buffer()--default int
    --draw_image_to_workspace()
    repaintWindow(CWindow1)

    if (image_width*zoom)+zoom>workspace_width or (image_height*zoom)+zoom>workspace_height then
     setWindowScrollRange ( CWindow1, SB_HORZ, 0, floor( ((image_width*zoom)-workspace_width) /zoom)+1, 1)
     --?floor( ((image_width*zoom)-workspace_width) /zoom)
     setWindowScrollRange ( CWindow1, SB_VERT, 0, floor( ((image_height*zoom)-workspace_height) /zoom)+1 , 1)

     setScrollChange( {CWindow1,SB_HORZ},  1 ,1 )
     setScrollChange( {CWindow1,SB_VERT},  1 ,1 )
    else
      setWindowScrollRange2 ( CWindow1, SB_HORZ, 0, 0, 1)
      setWindowScrollRange2 ( CWindow1, SB_VERT, 0, 0, 1)
    end if
  end if
end procedure
setHandler( PushButton2, w32HClick, routine_id("PushButton2_onClick"))
--------------------------------------------------------------------------------
procedure PushButton3_onClick (integer self, integer event, sequence params)--params is ()
  draw_mode=1
  setCheck(PushButton3,1)
  setCheck(PushButton4,0)
  setCheck(PushButton5,0)
  setCheck(PushButton6,0)
  setCheck(PushButton7,0)
  setCheck(PushButton8,0)
  setCheck(PushButton9,0)
  setCheck(PushButton10,0)
end procedure
setHandler( PushButton3, w32HClick, routine_id("PushButton3_onClick"))
--------------------------------------------------------------------------------
procedure PushButton4_onClick (integer self, integer event, sequence params)--params is ()
  draw_mode=2
  setCheck(PushButton3,0)
  setCheck(PushButton4,1)
  setCheck(PushButton5,0)
  setCheck(PushButton6,0)
  setCheck(PushButton7,0)
  setCheck(PushButton8,0)
  setCheck(PushButton9,0)
  setCheck(PushButton10,0)

  setVisible(PushButton13,1)
  setVisible(PushButton14,1)
  setVisible(PushButton15,1)
end procedure
setHandler( PushButton4, w32HClick, routine_id("PushButton4_onClick"))
--------------------------------------------------------------------------------
procedure PushButton5_onClick (integer self, integer event, sequence params)--params is ()
  draw_mode=4
  setCheck(PushButton3,0)
  setCheck(PushButton4,0)
  setCheck(PushButton5,1)
  setCheck(PushButton6,0)
  setCheck(PushButton7,0)
  setCheck(PushButton8,0)
  setCheck(PushButton9,0)
  setCheck(PushButton10,0)
end procedure
setHandler( PushButton5, w32HClick, routine_id("PushButton5_onClick"))
--------------------------------------------------------------------------------
procedure PushButton6_onClick (integer self, integer event, sequence params)--params is ()
  draw_mode=3
  setCheck(PushButton3,0)
  setCheck(PushButton4,0)
  setCheck(PushButton5,0)
  setCheck(PushButton6,1)
  setCheck(PushButton7,0)
  setCheck(PushButton8,0)
  setCheck(PushButton9,0)
  setCheck(PushButton10,0)
end procedure
setHandler( PushButton6, w32HClick, routine_id("PushButton6_onClick"))
--------------------------------------------------------------------------------
procedure PushButton7_onClick (integer self, integer event, sequence params)--params is ()
  draw_mode=5
  setCheck(PushButton3,0)
  setCheck(PushButton4,0)
  setCheck(PushButton5,0)
  setCheck(PushButton6,0)
  setCheck(PushButton7,1)
  setCheck(PushButton8,0)
  setCheck(PushButton9,0)
  setCheck(PushButton10,0)

  setVisible(PushButton13,1)
  setVisible(PushButton14,1)
  setVisible(PushButton15,1)
end procedure
setHandler( PushButton7, w32HClick, routine_id("PushButton7_onClick"))
--------------------------------------------------------------------------------
procedure PushButton8_onClick (integer self, integer event, sequence params)--params is ()
  draw_mode=6
  setCheck(PushButton3,0)
  setCheck(PushButton4,0)
  setCheck(PushButton5,0)
  setCheck(PushButton6,0)
  setCheck(PushButton7,0)
  setCheck(PushButton8,1)
  setCheck(PushButton9,0)
  setCheck(PushButton10,0)
end procedure
setHandler( PushButton8, w32HClick, routine_id("PushButton8_onClick"))
--------------------------------------------------------------------------------
procedure PushButton9_onClick (integer self, integer event, sequence params)--params is ()
  draw_mode=7
  setCheck(PushButton3,0)
  setCheck(PushButton4,0)
  setCheck(PushButton5,0)
  setCheck(PushButton6,0)
  setCheck(PushButton7,0)
  setCheck(PushButton8,0)
  setCheck(PushButton9,1)
  setCheck(PushButton10,0)
end procedure
setHandler( PushButton9, w32HClick, routine_id("PushButton9_onClick"))
--------------------------------------------------------------------------------
procedure PushButton10_onClick (integer self, integer event, sequence params)--params is ()
  draw_mode=8
  setCheck(PushButton3,0)
  setCheck(PushButton4,0)
  setCheck(PushButton5,0)
  setCheck(PushButton6,0)
  setCheck(PushButton7,0)
  setCheck(PushButton8,0)
  setCheck(PushButton9,0)
  setCheck(PushButton10,1)
end procedure
setHandler( PushButton10, w32HClick, routine_id("PushButton10_onClick"))
--------------------------------------------------------------------------------
procedure Bitmap1_onMouse (integer self, integer event, sequence params)--params is ( int event, int x, int y, int shift, int wheelmove )
  if params[1]=LeftDown then
    color_left=getPixel(Pixmap1,params[2],params[3])
    draw_window1()
  elsif params[1]=RightDown then
  	color_right=getPixel(Pixmap1,params[2],params[3])
  	draw_window1()
  end if
end procedure
setHandler( Bitmap1, w32HMouse, routine_id("Bitmap1_onMouse"))
--------------------------------------------------------------------------------
procedure PushButton13_onClick (integer self, integer event, sequence params)--params is ()
  filled=0
  setCheck(PushButton13,1)
  setCheck(PushButton14,0)
  setCheck(PushButton15,0)
end procedure
setHandler( PushButton13, w32HClick, routine_id("PushButton13_onClick"))
--------------------------------------------------------------------------------
procedure PushButton14_onClick (integer self, integer event, sequence params)--params is ()
  filled=1
  setCheck(PushButton13,0)
  setCheck(PushButton14,1)
  setCheck(PushButton15,0)
end procedure
setHandler( PushButton14, w32HClick, routine_id("PushButton14_onClick"))
--------------------------------------------------------------------------------
procedure PushButton15_onClick (integer self, integer event, sequence params)--params is ()
  filled=2
  setCheck(PushButton13,0)
  setCheck(PushButton14,0)
  setCheck(PushButton15,1)
end procedure
setHandler( PushButton15, w32HClick, routine_id("PushButton15_onClick"))
--------------------------------------------------------------------------------
procedure Window2_onOpen (integer self, integer event, sequence params)--params is ()

  make_picture_button(PushButton26, working_dir&"\\ok.bmp")
  make_picture_button(PushButton27, working_dir&"\\cancel.bmp")
  centerwindow(Window2)
  setText(EditText_width,sprint(defalut_width))
  setText(EditText_height,sprint(defalut_height))

end procedure
setHandler( Window2, w32HOpen, routine_id("Window2_onOpen"))
--------------------------------------------------------------------------------
procedure EditText_width_onEvent (integer self, integer event, sequence params)--params is ( int iMsg, atom wParm, atom lParm )
  if params[1]=LeftDown and getFocus()!=self then
  	setTimer(self,1001,100)
  end if
end procedure
setHandler( EditText_width, w32HEvent, routine_id("EditText_width_onEvent"))
--------------------------------------------------------------------------------
procedure EditText_width_onTimer (integer self, integer event, sequence params)--params is ( int timerId)
  setFocus(EditText_width)
  setIndex(EditText_width,{1,0})
  killTimer(self,1001)
end procedure
setHandler( EditText_width, w32HTimer, routine_id("EditText_width_onTimer"))
--------------------------------------------------------------------------------
procedure EditText_height_onEvent (integer self, integer event, sequence params)--params is ( int iMsg, atom wParm, atom lParm )
  if params[1]=LeftDown and getFocus()!=self then
  	setTimer(self,1001,100)
  end if
end procedure
setHandler( EditText_height, w32HEvent, routine_id("EditText_height_onEvent"))
--------------------------------------------------------------------------------
procedure EditText_height_onTimer (integer self, integer event, sequence params)--params is ( int timerId)
  setFocus(EditText_height)
  setIndex(EditText_height,{1,0})
  killTimer(self,1001)
end procedure
setHandler( EditText_height, w32HTimer, routine_id("EditText_height_onTimer"))
--------------------------------------------------------------------------------
procedure PushButton26_onClick (integer self, integer event, sequence params)--params is ()
atom width,height
  width=real(getText(EditText_width))
  height=real(getText(EditText_height))
  if width>=0 and height>=0 then

    if sequence(main_dib) then
      killDib(main_dib)
    end if
    if sequence(buffer_dib) then
      killDib(buffer_dib)	
    end if

  	main_dib = newDib(width,height)
  	
  	if sequence(main_dib) then
  	  filename="New Image.BMP"
  	  clearDib(main_dib, {255,255,255})
  	  setText(Window1,program_name&filename)
  	  image_width=main_dib[DibWidth]
  	  image_height=main_dib[DibHeight]
  	  buffer_dib=newDib(image_width,image_height)
  	  clearDib(buffer_dib, {255,255,255})
  	  zoom=1
  	  filled=0
  	  color_left=0
      color_right=rgb(255,255,255)
  	  draw_mode=1
  	  draw_image_to_buffer()
  	  repaintWindow(CWindow1)
  	else
	  puts(1,"sorry unable to create new picture \n")
  	end if

  else

  end if
  closeWindow(Window2)
end procedure
setHandler( PushButton26, w32HClick, routine_id("PushButton26_onClick"))
--------------------------------------------------------------------------------
procedure PushButton27_onClick (integer self, integer event, sequence params)--params is ()
  closeWindow(Window2)
end procedure
setHandler( PushButton27, w32HClick, routine_id("PushButton27_onClick"))


WinMain( Window1,Normal )
--this program has 2046 lines without including this line. If there is a discrepancy please send this file zipped to Judith.
